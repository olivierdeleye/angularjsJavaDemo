var data = require('./data/blob');

module.exports = {

	/**
	 * Takes a zip code as a parameter, returns an array containing valid cities for
	 * that particular zip code.
	 *
	 * keepOriginalFormat is an optional parameter. If set to true, it will return
	 * the city name as formatted by Bpost (sometimes all capitals, sometimes not,
	 * there's no rule). If not set, or set to false, the city name(s) are
	 * returned in a useable capitalized fashion.
	 */

	toCity: function (zip, keepOriginalFormat) {

		if (!zip) throw 'Need a zip code';
		if (isNaN(zip)) throw 'The zip code cannot be NaN.';

		if (keepOriginalFormat)
			return data.zips[zip];
		else return data.zips[zip].map(function (city) {
			return city.toLowerCase().replace(/\b\w/g, function (m) {
				return m.toUpperCase();
			});
		});
	},


	/**
	 * Takes a city name as a parameter, and returns valid zip codes for that
	 * particlar city.
	 */

	toZip: function (city) {
		if (!city) throw 'Need a city name';

		// If we have a direct hit:
		if (data.cities[city])
			return data.cities[city];

		// If we don't...
		var knownCity = '';
		var buff = '';

		for (knownCity in data.cities)
			if (data.cities.hasOwnProperty(knownCity))
				if (knownCity.indexOf("'") !== -1) {
					buff = knownCity.replace("\\\'", "'");
					if (buff.toLowerCase().trim() === city.toLowerCase().trim())
						return data.cities[knownCity];
				} else if (knownCity.toLowerCase().trim() === city.toLowerCase().trim())
			return data.cities[knownCity];
	},



	/**
	 * Takes a city name and a zip code as parameters.
	 * Returns a simple boolean.
	 */

	isValid: function (zip, city) {

		if (!city || !zip) throw 'Need both a zip and a city name';
		if (isNaN(zip)) throw 'The zip code cannot be NaN.';

		var cities = this.toCity(zip);
		var knownCity = 0;
		var i = 0,
			len = cities.length;

		for (; i < len; i++) {
			knownCity = cities[i];
			if (knownCity.indexOf("'") !== -1) {
				buff = knownCity.replace("\\\'", "'");
				if (buff.toLowerCase().trim() === city.toLowerCase().trim())
					return true;
			} else if (knownCity.toLowerCase().trim() === city.toLowerCase().trim()) {
				return true;
			}
		}

		return false;
	}

};